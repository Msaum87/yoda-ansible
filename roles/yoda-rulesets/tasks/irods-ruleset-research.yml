---
# Copyright Utrecht University

- name: Find out if default XSD, formelements and stylesheets are installed
  become_user: "{{ irods_service_account }}"
  become: yes
  command: 'ils /{{ irods_zone }}/yoda/{{ item.collection }}/{{ item.file }}'
  ignore_errors: True
  register: installed_defaults
  changed_when: False
  with_items:
    - { collection: 'formelements', file: 'default.xml' }
    - { collection: 'xsd', file: 'default.xsd' }
    - { collection: 'xsl', file: 'default.xsl' }
    - { collection: 'xsl', file: 'default2datacite.xsl' }
    - { collection: 'xsl', file: 'default2landingpage.xsl' }


- name: Ensure default schemas, formelements and stylesheets are installed
  become_user: "{{ irods_service_account }}"
  become: yes
  command: >
    irule -F /etc/irods/irods-ruleset-research/tools/install-default-xml-for-metadata.r
    '*resc="{{ irods_default_resc }}"'
    '*default="{{ default_yoda_schema }}"'
    '*update={{ update_schemas }}'
  register: install_default_xml_for_metadata
  when: (update_schemas == 1) or
        (installed_defaults|json_query('results[*].stderr')|join(' ') is search('does not exist'))
  changed_when: install_default_xml_for_metadata.stdout is search('(Installed|Updated)')


- name: List installed or updated schemas, formelements or stylesheets
  become_user: "{{ irods_service_account }}"
  become: yes
  debug:
    var: item
  when: item is search('(Installed|Updated)')
  with_items: "{{ install_default_xml_for_metadata.stdout_lines|default('Script did not run') }}"


- name: Find out if terms and conditions system collection exists
  become_user: "{{ irods_service_account }}"
  become: yes
  command: 'ils /{{ irods_zone }}/yoda/terms'
  ignore_errors: True
  register: terms_installed
  changed_when: False


- name: Install terms and conditions
  become_user: "{{ irods_service_account }}"
  become: yes
  shell: |
    iput -r /etc/irods/irods-ruleset-research/tools/terms /{{ irods_zone }}/yoda
    ichmod -rM inherit /{{ irods_zone }}/yoda/terms
    ichmod -rM read public /{{ irods_zone }}/yoda/terms
  when: (not ansible_check_mode) and (terms_installed.stderr.find('does not exist') >= 0)


- name: Ensure that Yoda publication directory is present
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/yoda/publication
  ignore_errors: true


- name: Remove cronjob to copy datapackages to the vault
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'copy-accepted-folders-to-vault.r'
    state: absent


- name: Remove cronjob to ingest changes into vault
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'ingest-changes-into-vault.r'
    state: absent


- name: Remove cronjob to process vault actions
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'process-vault-status-transitions.r'
    state: absent


- name: Configure cronjob to process publications
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'process-publication.r'
    minute: '*'
    job: '/bin/irule -F /etc/irods/irods-ruleset-research/tools/process-publication.r >/dev/null 2>&1'


- name: Install script for revision clean up
  become_user: "{{ irods_service_account }}"
  become: yes
  template:
    src: cronjob-revision-cleanup.sh.j2
    dest: '~{{ irods_service_account }}/.irods/cronjob-revision-cleanup.sh'
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'


- name: Remove outdated ExecCmd dir
  file:
    path: /var/lib/irods/iRODS/server/bin/cmd1/
    state: absent


- name: Remove insecure securecopy.sh
  file:
    path: /var/lib/irods/msiExecCmd_bin/securecopy.sh
    state: absent


- name: Ensure that secure ExecCmd dir exists
  file:
    path: /var/lib/irods/msiExecCmd_bin1
    owner: '{{ irods_service_account }}'
    group: '{{ irods_service_account }}'
    mode: 0755
    state: directory
  when: not ansible_check_mode


- name: Copy securecopy.sh to ExecCmd dir
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    remote_src: yes
    src: /etc/irods/irods-ruleset-research/tools/securecopy.sh
    dest: /var/lib/irods/msiExecCmd_bin1/securecopy.sh
    mode: 0755
  when: not ansible_check_mode


- name: Copy scheduled-copytovault.sh to ExecCmd dir
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    remote_src: yes
    src: /etc/irods/irods-ruleset-research/tools/scheduled-copytovault.sh
    dest: /var/lib/irods/msiExecCmd_bin1/scheduled-copytovault.sh
    mode: 0755
  when: not ansible_check_mode


- name: Copy scheduled-vaultactions.sh to ExecCmd dir
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    remote_src: yes
    src: /etc/irods/irods-ruleset-research/tools/scheduled-vaultactions.sh
    dest: /var/lib/irods/msiExecCmd_bin1/scheduled-vaultactions.sh
    mode: 0755
  when: not ansible_check_mode


- name: Copy scheduled-vaultingest.sh to ExecCmd dir
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    remote_src: yes
    src: /etc/irods/irods-ruleset-research/tools/scheduled-vaultingest.sh
    dest: /var/lib/irods/msiExecCmd_bin1/scheduled-vaultingest.sh
    mode: 0755
  when: not ansible_check_mode


- name: Configure cronjob to clean up revisions
  become_user: "{{ irods_service_account }}"
  become: yes
  cron:
    name: 'cronjob-revision-cleanup.sh'
    minute: 0
    hour: 2
    job: '/bin/bash $HOME/.irods/cronjob-revision-cleanup.sh >> $HOME/log/cronjob-revision-cleanup.log 2>&1'


- name: Remove deprecated configuration AVUs for research ruleset from system collection
  become_user: "{{ irods_service_account }}"
  become: yes
  irods_setavu:
    name: "/{{ irods_zone }}/yoda"
    irods_type: Collection
    attribute: "{{ avu.attribute }}"
    value: "{{ avu.value }}"
    state: absent
  with_items:
    - attribute: org_datacite_server
      value: "{{ datacite_server }}"
    - attribute: org_datacite_username
      value: "{{ datacite_username }}"
    - attribute: org_datacite_password
      value: "{{ datacite_password }}"
  loop_control:
    loop_var: avu


- name: Set configuration AVUs for research ruleset to system collection
  become_user: "{{ irods_service_account }}"
  become: yes
  irods_setavu:
    name: "/{{ irods_zone }}/yoda"
    irods_type: Collection
    attribute: "{{ avu.attribute }}"
    value: "{{ avu.value }}"
  with_items:
    - attribute: org_datacite_prefix
      value: "{{ datacite_prefix }}"
    - attribute: org_yoda_instance
      value: "{{ yoda_instance }}"
    - attribute: org_moai_host
      value: "{{ yoda_public_host }}"
    - attribute: org_random_id_length
      value: "{{ yoda_random_id_length }}"
    - attribute: org_yoda_prefix
      value: "{{ yoda_prefix }}"
    - attribute: org_public_vhost
      value: "{{ yoda_public_fqdn }}{% if (yoda_public_port is defined) %}:{{ yoda_public_port }}{% endif %}"
    - attribute: org_public_host
      value: "{{ yoda_public_host }}"
    - attribute: org_davrods_anonymous_vhost
      value: "{{ yoda_davrods_anonymous_fqdn }}{% if (yoda_davrods_anonymous_port is defined) %}:{{ yoda_davrods_anonymous_port }}{% endif %}"
  loop_control:
    loop_var: avu
