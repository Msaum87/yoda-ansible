---
# copyright Utrecht University

- name: Ensure Python dependencies are installed
  package:
    name:
      - python-enum34
      - python-jinja2
      - python-xmltodict
      - python-lxml
      - python-pip
    state: present


- name: Ensure Python ruleset dependencies are installed
  pip:
    name:
      - jsonschema==3.0.2
      - pathvalidate==0.29.1
  when: not ansible_check_mode


- name: Install Python JSON to AVU module and dependencies
  pip:
    name:
      - requests_cache
      - irods-avu-json==2.0.0
  when: not ansible_check_mode


- name: Checkout rulesets from github
  become_user: "{{ irods_service_account }}"
  become: yes
  git:
    repo: "{{ item.repo }}"
    dest: "/etc/irods/{{ item.name }}"
    version: "{{ item.version }}"
    update: "{{ update_rulesets }}"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  when: "'repo' in item"
  register: repochanges


- name: Find temporary rule files left behind
  find:
    paths: /etc/irods
    patterns: '*.re.*'
  register: temporary_rules


- name: Remove temporary rule files left behind
  become_user: "{{ irods_service_account }}"
  become: yes
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ temporary_rules.files }}"


- name: Ensure Python rules exist
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    content: ""
    dest: "{{ item }}"
    mode: 0644
    force: no
  with_items:
    - /etc/irods/rules_dr.py


- name: Run make install for each ruleset
  become_user: "{{ irods_service_account }}"
  become: yes
  make:
    chdir: "/etc/irods/{{ item.0.name }}"
    target: install
  when: item.1.changed
  with_together:
    - "{{ extra_rulesets + core_rulesets }}"
    - "{{ repochanges.results }}"


- name: Ensure all rulesets are in server config
  become_user: "{{ irods_service_account }}"
  become: yes
  irods_rulesets:
    config_path: "/etc/irods/server_config.json"
    rulesets: "{{ (extra_rulesets + core_rulesets) | map(attribute='ruleset_name') | list  }}"
  when: not ansible_check_mode


- include_tasks: "{{ ruleset.name }}.yml"
  with_items: "{{ extra_rulesets + core_rulesets }}"
  loop_control:
    loop_var: ruleset
  when: ruleset.install_scripts and install_rulesets


- name: Ensure Python rules are loaded
  become_user: "{{ irods_service_account }}"
  become: yes
  copy:
    src: "core.py.template"
    dest: "/etc/irods/core.py"
    mode: 0644
