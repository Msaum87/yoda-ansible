---
# copyright Utrecht University

- name: Download iRODS iCAT server rpm
  get_url:
    url: '{{ irods_icat.url }}/{{ irods_icat.filename }}'
    dest: '{{ rpm_dest_dir }}/{{ irods_icat.filename }}'
    checksum: '{{ irods_icat.checksum }}'


- name: Download iRODS database plugin rpm
  get_url:
    url: '{{ irods_db.url }}/{{ irods_db.filename }}'
    dest: '{{ rpm_dest_dir }}/{{ irods_db.filename }}'
    checksum: '{{ irods_db.checksum }}'


- name: Ensure iRODS iCommands are absent
  package:
    name: 'irods-icommands'
    state: absent


- name: Ensure iRODS iCAT server and database plugin are present
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - '{{ rpm_dest_dir }}/{{ irods_icat.filename }}'
    - '{{ rpm_dest_dir }}/{{ irods_db.filename }}'


- name: Generate zone key
  command: 'openssl rand -hex 16'
  register: zone_key
  args:
    creates: /home/{{ ansible_ssh_user }}/setup_irods


- name: Generate negotiation key
  command: 'openssl rand -hex 16'
  register: negotiation_key
  args:
    creates: /home/{{ ansible_ssh_user }}/setup_irods


- name: Generate control plane key
  command: 'openssl rand -hex 16'
  register: control_plane_key
  args:
    creates: /home/{{ ansible_ssh_user }}/setup_irods


- name: Store iCAT keys in variables
  set_fact:
    '{{ item.fact }}': '{{ item.key }}'
  with_items:
    - fact: irods_zone_key
      key: '{{ zone_key.stdout }}'
    - fact: irods_negotiation_key
      key: '{{ negotiation_key.stdout }}'
    - fact: irods_control_plane_key
      key: '{{ control_plane_key.stdout }}'


- name: Copy responses for setup_irods.sh
  template:
    src: setup_irods.j2
    dest: /home/{{ ansible_ssh_user }}/setup_irods
    force: no


- name: Configure iRODS iCAT server
  shell: /var/lib/irods/packaging/setup_irods.sh
    < /home/{{ ansible_ssh_user }}/setup_irods
  args:
    creates: /etc/irods/service_account.config
  run_once: true


- name: Ensure all users have iRODS read access on /zone/public
  become_user: '{{ irods_service_account }}'
  become: yes
  shell: 'ils -A /{{ irods_zone }}/home | grep "g:public#"'
  register: read_access
  ignore_errors: true


- name: Provide iRODS read access for all users on /zone/public
  become_user: '{{ irods_service_account }}'
  become: yes
  command: 'ichmod -M read public /{{ irods_zone }}/home'
  when: read_access | failed


- name: Enable ports for iCAT in firewall
  firewalld:
    port: '{{ item }}'
    permanent: true
    state: enabled
    immediate: yes
  with_items:
    - '{{ irods_icat_port }}/tcp'
    - '{{ irods_port_range_begin }}-{{ irods_port_range_end }}/tcp'
  notify: Restart firewall


- name: Ensure host has private key file
  copy:
    dest: "{{ hostvars[item]['pki_certs']['results'][0]['item'] }}"
    content: "{{ hostvars[item]['pki_certs']['results'][0]['content'] | b64decode }}"
    owner: root
    group: root
    mode: 0600
  with_inventory_hostnames:
    - 'portals:&{{ instance }}'


- name: Ensure host has Diffie-Hellman parameters
  copy:
    dest: "{{ hostvars[item]['pki_certs']['results'][1]['item'] }}"
    content: "{{ hostvars[item]['pki_certs']['results'][1]['content'] | b64decode }}"
    owner: root
    group: root
    mode: 0600
  with_inventory_hostnames:
    - 'portals:&{{ instance }}'


- name: Ensure host has certificate file
  copy:
    dest: "{{ hostvars[item]['pki_certs']['results'][2]['item'] }}"
    content: "{{ hostvars[item]['pki_certs']['results'][2]['content'] | b64decode }}"
    owner: root
    group: root
    mode: 0600
  with_inventory_hostnames:
    - 'portals:&{{ instance }}'


- name: Ensure private key file is available for iRODS
  command: 'cp /etc/pki/tls/private/yoda_key_signed.pem yoda_key_signed.pem'
  args:
    chdir: '/etc/irods'
    creates: 'yoda_key_signed.pem'


- name: Ensure Diffie-Hellman parameters are available for iRODS
  command: 'cp /etc/pki/tls/private/yoda_dhparams.pem yoda_dhparams.pem'
  args:
    chdir: '/etc/irods'
    creates: 'yoda_dhparams.pem'


- name: Ensure certificate file is available for iRODS
  command: 'cp /etc/pki/tls/certs/yoda_signed.crt yoda_signed.crt'
  args:
    chdir: '/etc/irods'
    creates: 'yoda_signed.crt'


- name: Ensure iRODS has access to PKI files
  file:
    path: '{{ item }}'
    mode: 0600
    group: '{{ irods_service_account }}'
    owner: '{{ irods_service_account }}'
    state: file
  with_items:
    - /etc/irods/yoda_key_signed.pem
    - /etc/irods/yoda_dhparams.pem
    - /etc/irods/yoda_signed.crt


- name: Ensure iRODS is configured to use SSL
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_config:
    path: '/var/lib/irods/.irods/irods_environment.json'
    key: '{{ item.key }}'
    value: '{{ item.value }}'
  with_items:
    - key: 'irods_ssl_certificate_chain_file'
      value: '/etc/irods/yoda_signed.crt'
    - key: 'irods_ssl_certificate_key_file'
      value: '/etc/irods/yoda_key_signed.pem'
    - key: 'irods_ssl_dh_params_file'
      value: '/etc/irods/yoda_dhparams.pem'
