---
# copyright Utrecht University

- name: Check if Zabbix agent is installable from repository
  yum:
    list: '{{ zabbix_agent.package }}'
  register: zabbix_agent_repo


- name: Download Zabbix agent rpm
  get_url:
    url: '{{ zabbix_agent.url }}/{{ zabbix_agent.filename }}'
    dest: '{{ rpm_dest_dir }}/{{ zabbix_agent.filename }}'
    checksum: '{{ zabbix_agent.checksum }}'
  when: not zabbix_agent_repo.results


- name: Install Zabbix agent from downloaded rpm
  package:
    name: '{{ rpm_dest_dir }}/{{ zabbix_agent.filename }}'
    state: present
  when: not zabbix_agent_repo.results


- name: Ensure Zabbix agent rpm is installed
  package:
    name: '{{ zabbix_agent.package }}'
    state: present
  when: zabbix_agent_repo.results


- name: Enable the Zabbix agent service
  service:
    name: zabbix-agent
    enabled: yes
    use: service


- name: Allow Zabbix agent to start
  selinux_permissive:
    name: zabbix_agent_t
    permissive: true
  when: ansible_selinux

  
- name: Generate Zabbix agent PSK
  shell: openssl rand -hex 256 > /etc/zabbix/zabbix_agentd.psk
    creates=/etc/zabbix/zabbix_agentd.psk
  when: not ansible_check_mode


- name: Ensure right file ownership on zabbix_agentd.psk
  file:
    path: /etc/zabbix/zabbix_agentd.psk
    owner: zabbix
    group: zabbix
    mode: 0600


- name: Configure Zabbix agent
  template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix/zabbix_agentd.conf
    owner: zabbix
    group: zabbix
    mode: 0600
  notify: Restart Zabbix agent


- name: Checkout Yoda Zabbix scripts and rules
  become_user: "{{ irods_service_account }}"
  become: yes
  git:
    repo: "https://github.com/UtrechtUniversity/yoda-zabbix.git"
    dest: "/etc/irods/yoda-zabbix/src"
    version: "{{ yoda_version }}"
  register: zabbix_repo


- name: Ensure zabbix_agentd.userparams.conf exists
  stat: path=/etc/irods/yoda-zabbix/zabbix_agentd.userparams.conf
  register: zabbix_agentd


- name: Copy zabbix_agentd.userparams.conf to right place
  command: cp /etc/irods/yoda-zabbix/src/zabbix_agentd.userparams.conf /etc/irods/yoda-zabbix/zabbix_agentd.userparams.conf
  when: not zabbix_agentd.stat.exists or zabbix_repo.changed


- name: Ensure right file ownership on zabbix_agentd.userparams.conf
  file:
    path: /etc/irods/yoda-zabbix/zabbix_agentd.userparams.conf
    owner: zabbix
    group: zabbix
    mode: 0400


- name: Ensure yoda-zabbix-sudoers exists
  stat: path=/etc/sudoers.d/yoda-zabbix-sudoers
  register: zabbix_sudoers


- name: Copy yoda-zabbix-sudoers to right place
  command: cp /etc/irods/yoda-zabbix/src/yoda-zabbix-sudoers /etc/sudoers.d/yoda-zabbix-sudoers
  when: not zabbix_sudoers.stat.exists or zabbix_repo.changed


- name: Ensure right file ownership on zabbix_agentd.userparams.conf
  file:
    path: /etc/sudoers.d/yoda-zabbix-sudoers
    owner: root
    group: root
    mode: 0440


- name: Copy Yoda Zabbix rules
  shell: "cp /etc/irods/yoda-zabbix/src/*.r /etc/irods/yoda-zabbix/"
  when: zabbix_repo.changed
  notify: Restart Zabbix agent


- name: Copy Yoda Zabbix scripts
  shell: "cp /etc/irods/yoda-zabbix/src/*.sh /etc/irods/yoda-zabbix/"
  when: zabbix_repo.changed
  notify: Restart Zabbix agent


- name: Ensure right file ownership on Yoda Zabbix rules
  file:
    path: "/etc/irods/yoda-zabbix/{{ item }}"
    owner: irods
    group: irods
    mode: 0500
  with_items:
    - monitorDelayedRules.r
    - monitorPublicationsPending.r
    - listOrphanedGroups.r


- name: Ensure right file ownership on Yoda Zabbix scripts
  file:
    path: "/etc/irods/yoda-zabbix/{{ item }}"
    owner: zabbix
    group: zabbix
    mode: 0500
  with_items:
    - externalUsersCount.sh
    - internalUsersCount.sh
    - irodsGroupsCount.sh
    - monitorDelayedRules.sh
    - monitorPublicationsPending.sh
    - concurrentiRodsClientConnections.sh
    - concurrentiRodsUsers.sh
    - dailyRodslogErrors.sh
    - hourlyRodslogErrors.sh
    - monitorKilledProcesses.sh
    - listOrphanedGroups.sh
    - testUserParam.sh
