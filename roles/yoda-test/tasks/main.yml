---
# copyright Utrecht University

- name: Set storage tiers to Standard
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imeta set -R '{{ item }}' org_storage_tier Standard
  ignore_errors: true
  with_items:
    - "{{ reset_tiers }}"


- name: Prepare test data research-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Prepare test data vault-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/vault-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Prepare test data datamanager-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/datamanager-'{{ item.datamanager }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_datamanager_groups }}"


- name: Prepare test data intake-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/intake-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Prepare test data intake-vault-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/vault-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Prepare test data grp-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/home/grp-'{{ item.grp }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_grp_groups }}"


- name: Prepare test data revisions research-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/yoda/revisions/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Prepare test data trash research-groups for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -rM own rods /{{ irods_zone }}/trash/home/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Prepare trash test users for removal
  become_user: '{{ irods_service_account }}'
  become: yes
  command: |
    ichmod -rM own rods /{{ irods_zone }}/trash/home/'{{ item.name }}'
  ignore_errors: true
  with_items:
    - "{{ test_users }}"


- name: Remove test data research-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test data vault-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/vault-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test data datamanager-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/datamanager-'{{ item.datamanager }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_datamanager_groups }}"


- name: Remove test data intake-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/intake-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Remove test data intake-vault-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/vault-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Remove test data grp-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/home/grp-'{{ item.grp }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_grp_groups }}"


- name: Remove test data trash research-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/trash/home/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test data revisions research-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irm -r /{{ irods_zone }}/yoda/revisions/research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test research-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup research-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test vault-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup vault-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test read-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup read-'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test intake-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup intake-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Remove test intake-vault-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup vault-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Remove test intake-read-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup read-'{{ item.intake }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_intake_groups }}"


- name: Remove test datamanager-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup datamanager-'{{ item.datamanager }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_datamanager_groups }}"


- name: Remove test grp-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmgroup grp-'{{ item.grp }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_grp_groups }}"


- name: Remove trash data research-groups
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irmtrash -rM /{{ irods_zone }}/trash/home/'{{ item.research }}'
  ignore_errors: true
  with_items:
    - "{{ deletion_research_groups }}"


- name: Remove test trash data user-homes
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irmtrash -rM /{{ irods_zone }}/trash/home/'{{ item.name }}'
  ignore_errors: true
  with_items:
    - "{{ test_users }}"


- name: Remove trash data rods-home
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    irmtrash -rM /{{ irods_zone }}/trash/home/rods
  ignore_errors: true


- name: Remove test users
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iadmin rmuser '{{ item }}'
  ignore_errors: true
  with_items:
    - createnewuser


- name: Ensure Yoda test users exists
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_mkuser:
    name: '{{ item.name }}'
  with_items: '{{ test_users }}'


- name: Ensure Yoda test users have type
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_moduser:
    name: '{{ item.name }}'
    option: 'type'
    value: '{{ item.type }}'
  with_items: '{{ test_users }}'


- name: Ensure Yoda test users have password
  become_user: '{{ irods_service_account }}'
  become: yes
  irods_moduser:
    name: '{{ item.name }}'
    option: 'password'
    value: '{{ item.password }}'
  with_items: '{{ test_users }}'


- name: Ensure Yoda test groups exists
  become_user: '{{ irods_service_account }}'
  become: yes
  yoda_addgroup:
    groupName: '{{ item.groupName }}'
    category: '{{ item.category }}'
    subcategory: '{{ item.subcategory }}'
    description: 'Auto-generated by Ansible'
  with_items: '{{ test_groups }}'


- name: Ensure Yoda users are added to groups
  become_user: '{{ irods_service_account }}'
  become: yes
  yoda_addgroupuser:
    groupName: '{{ item.groupName }}'
    user: '{{ item.user }}'
    role: '{{ item.role }}'
  with_items: '{{ test_groupusers }}'


- name: Ensure Yoda intake datamanager has read access to grp-vault-initial folder
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -M read grp-datamanager-initial /{{ irods_zone }}/home/grp-vault-initial
  ignore_errors: true


- name: Ensure Yoda intake datamanager has read access to grp-vault-test folder
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    ichmod -M read grp-datamanager-test /{{ irods_zone }}/home/grp-vault-test
  ignore_errors: true


- name: Ensure Yoda test data directory research-initial/testdata is present in Yoda
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/home/research-initial/testdata
  ignore_errors: true


- name: Ensure Yoda test data directory is present
  become_user: '{{ irods_service_account }}'
  become: yes
  file:
    path: '~/testdata/'
    state: directory
    mode: 0755


- name: Ensure Yoda test data directory research-mdtest/nomdpresent is present in Yoda
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/home/research-mdtest/nomdpresent
  ignore_errors: true


- name: Ensure Yoda test data directory research-mdtest/copyfromparent is present in Yoda
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/home/research-mdtest/copyfromparent
  ignore_errors: true


- name: Ensure Yoda test files are present in VM
  become_user: '{{ irods_service_account }}'
  become: yes
  copy:
    src: '{{ item }}'
    dest: '~/testdata/{{ item }}'
    mode: 0644
  with_items:
    - 'lorem.txt'
    - 'SIPI_Jelly_Beans_4.1.07.tiff'


- name: Ensure Yoda test files are present in Yoda directory research-initial/testdata
  become_user: '{{ irods_service_account }}'
  become: yes
  shell:
    iput -f ~/testdata/{{ item }} /{{ irods_zone }}/home/research-initial/testdata
  with_items:
    - 'lorem.txt'
    - 'SIPI_Jelly_Beans_4.1.07.tiff'


- name: Ensure intake module cronjob rules are present
  become_user: '{{ irods_service_account }}'
  become: yes
  copy:
    src: '{{ item }}'
    dest: '~/.irods/{{ item }}'
    mode: 0644
  with_items:
    - 'job_movetovault.r'
    - 'job_checksums.r'


- name: Configure cronjob to move grp-intake-* datapackages to the grp-vault-*
  become_user: '{{ irods_service_account }}'
  become: yes
  cron:
    name: 'job_movetovault.r'
    minute: '*/5'
    job: '/bin/irule -F /var/lib/irods/.irods/job_movetovault.r >>$HOME/log/job_movetovault.log 2>&1'


- name: Configure cronjob to make checksums of datapackages in grp-vault-*
  become_user: '{{ irods_service_account }}'
  become: yes
  cron:
    name: 'job_checksums.r'
    minute: '*/5'
    job: '/bin/irule -F /var/lib/irods/.irods/job_checksums.r >>$HOME/log/job_checksums.log 2>&1'


- name: Ensure Yoda licenses directory is present
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    imkdir /{{ irods_zone }}/yoda/licenses
  ignore_errors: true


- name: Ensure licenses are present in Yoda
  become_user: '{{ irods_service_account }}'
  become: yes
  command:
    iput -f '/etc/irods/irods-ruleset-research/tools/licenses/{{ item }}' '/{{ irods_zone }}/yoda/licenses/{{ item }}'
  with_items:
    - "Creative Commons Attribution 4.0 International Public License.txt"
    - "Creative Commons Attribution 4.0 International Public License.uri"
    - "Creative Commons Attribution-ShareAlike 4.0 International Public License.txt"
    - "Creative Commons Attribution-ShareAlike 4.0 International Public License.uri"
    - "Open Data Commons Attribution License (ODC-By) v1.0.txt"
    - "Open Data Commons Attribution License (ODC-By) v1.0.uri"
